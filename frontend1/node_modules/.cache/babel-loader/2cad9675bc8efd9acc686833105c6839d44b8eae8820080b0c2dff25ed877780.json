{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Box.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  height: 500 // we can control scene size by setting container dimensions\n};\nclass Box extends Component {\n  constructor(...args) {\n    super(...args);\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    this.sceneSetup = () => {\n      // get container dimensions and use them for scene sizing\n      const width = this.mount.clientWidth;\n      const height = this.mount.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75,\n      // fov = field of view\n      width / height,\n      // aspect ratio\n      0.1,\n      // near plane\n      1000 // far plane\n      );\n      this.camera.position.z = 500; // is used here to set some distance from a cube that is located at z = 0\n      // OrbitControls allow a camera to orbit around the object\n      // https://threejs.org/docs/#examples/controls/OrbitControls\n      this.controls = new OrbitControls(this.camera, this.mount);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.mount.appendChild(this.renderer.domElement); // mount using React ref\n    };\n    // Code below is taken from Three.js OBJ Loader example\n    // https://threejs.org/docs/#examples/en/loaders/OBJLoader\n    this.loadTheModel = () => {\n      // instantiate a loader\n      const loader = new OBJLoader();\n\n      // load a resource\n      loader.load(\n      // resource URL relative to the /public/index.html of the app\n      'eleph.obj',\n      // called when resource is loaded\n      object => {\n        this.scene.add(object);\n\n        // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n        // you can always set console.log(this.scene) and check its children to know the name of a model\n        const el = this.scene.getObjectByName(\"Elephant_4\");\n\n        // change some custom props of the element: placement, color, rotation, anything that should be\n        // done once the model was loaded and ready for display\n        el.position.set(0, -150, 0);\n        el.material.color.set(0x50C878);\n        el.rotation.x = 23.5;\n\n        // make this element available inside of the whole component to do any animation later\n        this.model = el;\n      },\n      // called when loading is in progresses\n      xhr => {\n        const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n        console.log(loadingPercentage + '% loaded');\n\n        // update parent react component to display loading percentage\n        this.props.onProgress(loadingPercentage);\n      },\n      // called when loading has errors\n      error => {\n        console.log('An error happened:' + error);\n      });\n    };\n    // adding some lights to the scene\n    this.addLights = () => {\n      const lights = [];\n\n      // set color and intensity of lights\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n      // place some lights around the scene for best looks and feel\n      lights[0].position.set(0, 2000, 0);\n      lights[1].position.set(1000, 2000, 1000);\n      lights[2].position.set(-1000, -2000, -1000);\n      this.scene.add(lights[0]);\n      this.scene.add(lights[1]);\n      this.scene.add(lights[2]);\n    };\n    this.startAnimationLoop = () => {\n      // slowly rotate an object\n      if (this.model) this.model.rotation.z += 0.005;\n      this.renderer.render(this.scene, this.camera);\n\n      // The window.requestAnimationFrame() method tells the browser that you wish to perform\n      // an animation and requests that the browser call a specified function\n      // to update an animation before the next repaint\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n    this.handleWindowResize = () => {\n      const width = this.mount.clientWidth;\n      const height = this.mount.clientHeight;\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n\n      // Note that after making changes to most of camera properties you have to call\n      // .updateProjectionMatrix for the changes to take effect.\n      this.camera.updateProjectionMatrix();\n    };\n  }\n  componentDidMount() {\n    this.sceneSetup();\n    this.addLights();\n    this.loadTheModel();\n    this.startAnimationLoop();\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    this.controls.dispose();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      ref: ref => this.mount = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 16\n    }, this);\n  }\n}\nclass Container extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isMounted: true\n    };\n  }\n  render() {\n    const {\n      isMounted = true,\n      loadingPercentage = 0\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setState(state => ({\n          isMounted: !state.isMounted\n        })),\n        children: isMounted ? \"Unmount\" : \"Mount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), isMounted && /*#__PURE__*/_jsxDEV(Box, {\n        onProgress: loadingPercentage => this.setState({\n          loadingPercentage\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 31\n      }, this), isMounted && loadingPercentage === 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Scroll to zoom, drag to rotate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 60\n      }, this), isMounted && loadingPercentage !== 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Loading Model: \", loadingPercentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 60\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default Box;","map":{"version":3,"names":["React","Component","THREE","OrbitControls","OBJLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","style","height","Box","constructor","args","sceneSetup","width","mount","clientWidth","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","controls","renderer","WebGLRenderer","setSize","appendChild","domElement","loadTheModel","loader","load","object","add","el","getObjectByName","set","material","color","rotation","x","model","xhr","loadingPercentage","Math","ceil","loaded","total","console","log","props","onProgress","error","addLights","lights","PointLight","startAnimationLoop","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","cancelAnimationFrame","dispose","ref","fileName","_jsxFileName","lineNumber","columnNumber","Container","state","isMounted","children","onClick","setState"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Box.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\n\nconst style = {\n    height: 500 // we can control scene size by setting container dimensions\n};\n\nclass Box extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addLights();\n        this.loadTheModel();\n        this.startAnimationLoop();\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n    }\n\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75, // fov = field of view\n            width / height, // aspect ratio\n            0.1, // near plane\n            1000 // far plane\n        );\n        this.camera.position.z = 500; // is used here to set some distance from a cube that is located at z = 0\n        // OrbitControls allow a camera to orbit around the object\n        // https://threejs.org/docs/#examples/controls/OrbitControls\n        this.controls = new OrbitControls( this.camera, this.mount );\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize( width, height );\n        this.mount.appendChild( this.renderer.domElement ); // mount using React ref\n    };\n\n    // Code below is taken from Three.js OBJ Loader example\n    // https://threejs.org/docs/#examples/en/loaders/OBJLoader\n    loadTheModel = () => {\n        // instantiate a loader\n        const loader = new OBJLoader();\n\n        // load a resource\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'eleph.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const el = this.scene.getObjectByName(\"Elephant_4\");\n\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                el.position.set(0, -150,0 );\n                el.material.color.set(0x50C878);\n                el.rotation.x = 23.5;\n\n                // make this element available inside of the whole component to do any animation later\n                this.model = el;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log( ( loadingPercentage ) + '% loaded' );\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n    };\n\n    // adding some lights to the scene\n    addLights = () => {\n        const lights = [];\n\n        // set color and intensity of lights\n        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n\n        // place some lights around the scene for best looks and feel\n        lights[ 0 ].position.set( 0, 2000, 0 );\n        lights[ 1 ].position.set( 1000, 2000, 1000 );\n        lights[ 2 ].position.set( - 1000, - 2000, - 1000 );\n\n        this.scene.add( lights[ 0 ] );\n        this.scene.add( lights[ 1 ] );\n        this.scene.add( lights[ 2 ] );\n    };\n\n    startAnimationLoop = () => {\n        // slowly rotate an object\n        if (this.model) this.model.rotation.z += 0.005;\n\n        this.renderer.render( this.scene, this.camera );\n\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\n        // an animation and requests that the browser call a specified function\n        // to update an animation before the next repaint\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n    handleWindowResize = () => {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.renderer.setSize( width, height );\n        this.camera.aspect = width / height;\n\n        // Note that after making changes to most of camera properties you have to call\n        // .updateProjectionMatrix for the changes to take effect.\n        this.camera.updateProjectionMatrix();\n    };\n\n    render() {\n        return <div style={style} ref={ref => (this.mount = ref)} />;\n    }\n}\n\nclass Container extends React.Component {\n    state = {isMounted: true};\n\n    render() {\n        const {isMounted = true, loadingPercentage = 0} = this.state;\n        return (\n            <>\n                <button onClick={() => this.setState(state => ({isMounted: !state.isMounted}))}>\n                    {isMounted ? \"Unmount\" : \"Mount\"}\n                </button>\n                {isMounted && <Box onProgress={loadingPercentage => this.setState({ loadingPercentage })} />}\n                {isMounted && loadingPercentage === 100 && <div>Scroll to zoom, drag to rotate</div>}\n                {isMounted && loadingPercentage !== 100 && <div>Loading Model: {loadingPercentage}%</div>}\n            </>\n        )\n    }\n}\n\nexport default Box"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}