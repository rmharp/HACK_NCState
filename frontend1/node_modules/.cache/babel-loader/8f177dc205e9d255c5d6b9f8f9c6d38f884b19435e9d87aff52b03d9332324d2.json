{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Box2.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  height: 500 // Set the scene height\n};\nconst Box2 = ({\n  onProgress\n}) => {\n  _s();\n  const mount = useRef(null);\n  const [scene, setScene] = useState(null);\n  const [camera, setCamera] = useState(null);\n  const [renderer, setRenderer] = useState(null);\n  const [controls, setControls] = useState(null);\n  const [model, setModel] = useState(null);\n  const [requestID, setRequestID] = useState(null);\n  useEffect(() => {\n    const sceneSetup = () => {\n      const width = mount.current.clientWidth;\n      const height = mount.current.clientHeight;\n      const newScene = new THREE.Scene();\n      const newCamera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n      newCamera.position.z = 500;\n      const newRenderer = new THREE.WebGLRenderer();\n      newRenderer.setSize(width, height);\n      mount.current.appendChild(newRenderer.domElement);\n      const newControls = new OrbitControls(newCamera, mount.current);\n      setScene(newScene);\n      setCamera(newCamera);\n      setRenderer(newRenderer);\n      setControls(newControls);\n    };\n    const loadTheModel = () => {\n      const loader = new OBJLoader();\n      loader.load('../models/eleph.obj', object => {\n        if (!scene) return; // Guard clause to ensure scene is defined\n        scene.add(object);\n        const el = scene.getObjectByName(\"Elephant_4\");\n        el.position.set(0, -150, 0);\n        el.material.color.set(0x50C878);\n        el.rotation.x = 23.5;\n        setModel(el);\n      }, xhr => {\n        const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n        onProgress(loadingPercentage);\n      }, error => {\n        console.error('An error happened:', error);\n      });\n    };\n    const addLights = () => {\n      if (!scene) return; // Guard clause to ensure scene is defined\n\n      const lights = [];\n      lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n      lights[0].position.set(0, 2000, 0);\n      lights[1].position.set(1000, 2000, 1000);\n      lights[2].position.set(-1000, -2000, -1000);\n      scene.add(lights[0]);\n      scene.add(lights[1]);\n      scene.add(lights[2]);\n    };\n    const startAnimationLoop = () => {\n      if (!scene || !model) return; // Guard clause to ensure scene and model are defined\n\n      model.rotation.z += 0.005;\n      renderer.render(scene, camera);\n      const newRequestID = window.requestAnimationFrame(startAnimationLoop);\n      setRequestID(newRequestID);\n    };\n    const handleWindowResize = () => {\n      const width = mount.current.clientWidth;\n      const height = mount.current.clientHeight;\n      if (!renderer || !camera) return; // Guard clause to ensure renderer and camera are defined\n\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    if (!scene) {\n      sceneSetup();\n      addLights();\n      loadTheModel();\n      window.addEventListener('resize', handleWindowResize);\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n      window.cancelAnimationFrame(requestID);\n      if (controls) controls.dispose();\n    };\n  }, [scene, camera, renderer, controls, model, requestID, onProgress]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      ref: mount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Box2, \"GfL7yJIhl8OV+mvP1AUpt0Inng0=\");\n_c = Box2;\nexport default Box;\nvar _c;\n$RefreshReg$(_c, \"Box2\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","OBJLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","style","height","Box2","onProgress","_s","mount","scene","setScene","camera","setCamera","renderer","setRenderer","controls","setControls","model","setModel","requestID","setRequestID","sceneSetup","width","current","clientWidth","clientHeight","newScene","Scene","newCamera","PerspectiveCamera","position","z","newRenderer","WebGLRenderer","setSize","appendChild","domElement","newControls","loadTheModel","loader","load","object","add","el","getObjectByName","set","material","color","rotation","x","xhr","loadingPercentage","Math","ceil","loaded","total","error","console","addLights","lights","PointLight","startAnimationLoop","render","newRequestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","Box","$RefreshReg$"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Box2.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\nconst style = {\n    height: 500 // Set the scene height\n};\n\nconst Box2 = ({ onProgress }) => {\n    const mount = useRef(null);\n    const [scene, setScene] = useState(null);\n    const [camera, setCamera] = useState(null);\n    const [renderer, setRenderer] = useState(null);\n    const [controls, setControls] = useState(null);\n    const [model, setModel] = useState(null);\n    const [requestID, setRequestID] = useState(null);\n\n    useEffect(() => {\n        const sceneSetup = () => {\n            const width = mount.current.clientWidth;\n            const height = mount.current.clientHeight;\n\n            const newScene = new THREE.Scene();\n            const newCamera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n            newCamera.position.z = 500;\n            const newRenderer = new THREE.WebGLRenderer();\n            newRenderer.setSize(width, height);\n            mount.current.appendChild(newRenderer.domElement);\n            const newControls = new OrbitControls(newCamera, mount.current);\n\n            setScene(newScene);\n            setCamera(newCamera);\n            setRenderer(newRenderer);\n            setControls(newControls);\n        };\n\n        const loadTheModel = () => {\n            const loader = new OBJLoader();\n\n            loader.load(\n                '../models/eleph.obj',\n                (object) => {\n                    if (!scene) return; // Guard clause to ensure scene is defined\n                    scene.add(object);\n\n                    const el = scene.getObjectByName(\"Elephant_4\");\n                    el.position.set(0, -150, 0);\n                    el.material.color.set(0x50C878);\n                    el.rotation.x = 23.5;\n\n                    setModel(el);\n                },\n                (xhr) => {\n                    const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                    onProgress(loadingPercentage);\n                },\n                (error) => {\n                    console.error('An error happened:', error);\n                }\n            );\n        };\n\n        const addLights = () => {\n            if (!scene) return; // Guard clause to ensure scene is defined\n\n            const lights = [];\n\n            lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n            lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n            lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n            lights[0].position.set(0, 2000, 0);\n            lights[1].position.set(1000, 2000, 1000);\n            lights[2].position.set(-1000, -2000, -1000);\n\n            scene.add(lights[0]);\n            scene.add(lights[1]);\n            scene.add(lights[2]);\n        };\n\n        const startAnimationLoop = () => {\n            if (!scene || !model) return; // Guard clause to ensure scene and model are defined\n\n            model.rotation.z += 0.005;\n\n            renderer.render(scene, camera);\n            const newRequestID = window.requestAnimationFrame(startAnimationLoop);\n            setRequestID(newRequestID);\n        };\n\n        const handleWindowResize = () => {\n            const width = mount.current.clientWidth;\n            const height = mount.current.clientHeight;\n\n            if (!renderer || !camera) return; // Guard clause to ensure renderer and camera are defined\n\n            renderer.setSize(width, height);\n            camera.aspect = width / height;\n            camera.updateProjectionMatrix();\n        };\n\n        if (!scene) {\n            sceneSetup();\n            addLights();\n            loadTheModel();\n            window.addEventListener('resize', handleWindowResize);\n        }\n\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n            window.cancelAnimationFrame(requestID);\n            if (controls) controls.dispose();\n        };\n    }, [scene, camera, renderer, controls, model, requestID, onProgress]);\n\n    return (\n        <>\n            <div style={style} ref={mount} />\n        </>\n    );\n};\n\nexport default Box;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,SAASC,SAAS,QAAQ,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjE,MAAMC,KAAK,GAAG;EACVC,MAAM,EAAE,GAAG,CAAC;AAChB,CAAC;AAED,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,KAAK,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAEhDF,SAAS,CAAC,MAAM;IACZ,MAAM4B,UAAU,GAAGA,CAAA,KAAM;MACrB,MAAMC,KAAK,GAAGd,KAAK,CAACe,OAAO,CAACC,WAAW;MACvC,MAAMpB,MAAM,GAAGI,KAAK,CAACe,OAAO,CAACE,YAAY;MAEzC,MAAMC,QAAQ,GAAG,IAAI9B,KAAK,CAAC+B,KAAK,CAAC,CAAC;MAClC,MAAMC,SAAS,GAAG,IAAIhC,KAAK,CAACiC,iBAAiB,CAAC,EAAE,EAAEP,KAAK,GAAGlB,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;MAC5EwB,SAAS,CAACE,QAAQ,CAACC,CAAC,GAAG,GAAG;MAC1B,MAAMC,WAAW,GAAG,IAAIpC,KAAK,CAACqC,aAAa,CAAC,CAAC;MAC7CD,WAAW,CAACE,OAAO,CAACZ,KAAK,EAAElB,MAAM,CAAC;MAClCI,KAAK,CAACe,OAAO,CAACY,WAAW,CAACH,WAAW,CAACI,UAAU,CAAC;MACjD,MAAMC,WAAW,GAAG,IAAIxC,aAAa,CAAC+B,SAAS,EAAEpB,KAAK,CAACe,OAAO,CAAC;MAE/Db,QAAQ,CAACgB,QAAQ,CAAC;MAClBd,SAAS,CAACgB,SAAS,CAAC;MACpBd,WAAW,CAACkB,WAAW,CAAC;MACxBhB,WAAW,CAACqB,WAAW,CAAC;IAC5B,CAAC;IAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACvB,MAAMC,MAAM,GAAG,IAAIzC,SAAS,CAAC,CAAC;MAE9ByC,MAAM,CAACC,IAAI,CACP,qBAAqB,EACpBC,MAAM,IAAK;QACR,IAAI,CAAChC,KAAK,EAAE,OAAO,CAAC;QACpBA,KAAK,CAACiC,GAAG,CAACD,MAAM,CAAC;QAEjB,MAAME,EAAE,GAAGlC,KAAK,CAACmC,eAAe,CAAC,YAAY,CAAC;QAC9CD,EAAE,CAACb,QAAQ,CAACe,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3BF,EAAE,CAACG,QAAQ,CAACC,KAAK,CAACF,GAAG,CAAC,QAAQ,CAAC;QAC/BF,EAAE,CAACK,QAAQ,CAACC,CAAC,GAAG,IAAI;QAEpB/B,QAAQ,CAACyB,EAAE,CAAC;MAChB,CAAC,EACAO,GAAG,IAAK;QACL,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,IAAI,CAACH,GAAG,CAACI,MAAM,GAAGJ,GAAG,CAACK,KAAK,GAAG,GAAG,CAAC;QACjEjD,UAAU,CAAC6C,iBAAiB,CAAC;MACjC,CAAC,EACAK,KAAK,IAAK;QACPC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC9C,CACJ,CAAC;IACL,CAAC;IAED,MAAME,SAAS,GAAGA,CAAA,KAAM;MACpB,IAAI,CAACjD,KAAK,EAAE,OAAO,CAAC;;MAEpB,MAAMkD,MAAM,GAAG,EAAE;MAEjBA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI/D,KAAK,CAACgE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;MAChDD,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI/D,KAAK,CAACgE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;MAChDD,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI/D,KAAK,CAACgE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;MAEhDD,MAAM,CAAC,CAAC,CAAC,CAAC7B,QAAQ,CAACe,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;MAClCc,MAAM,CAAC,CAAC,CAAC,CAAC7B,QAAQ,CAACe,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACxCc,MAAM,CAAC,CAAC,CAAC,CAAC7B,QAAQ,CAACe,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;MAE3CpC,KAAK,CAACiC,GAAG,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC;MACpBlD,KAAK,CAACiC,GAAG,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC;MACpBlD,KAAK,CAACiC,GAAG,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;IAED,MAAME,kBAAkB,GAAGA,CAAA,KAAM;MAC7B,IAAI,CAACpD,KAAK,IAAI,CAACQ,KAAK,EAAE,OAAO,CAAC;;MAE9BA,KAAK,CAAC+B,QAAQ,CAACjB,CAAC,IAAI,KAAK;MAEzBlB,QAAQ,CAACiD,MAAM,CAACrD,KAAK,EAAEE,MAAM,CAAC;MAC9B,MAAMoD,YAAY,GAAGC,MAAM,CAACC,qBAAqB,CAACJ,kBAAkB,CAAC;MACrEzC,YAAY,CAAC2C,YAAY,CAAC;IAC9B,CAAC;IAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;MAC7B,MAAM5C,KAAK,GAAGd,KAAK,CAACe,OAAO,CAACC,WAAW;MACvC,MAAMpB,MAAM,GAAGI,KAAK,CAACe,OAAO,CAACE,YAAY;MAEzC,IAAI,CAACZ,QAAQ,IAAI,CAACF,MAAM,EAAE,OAAO,CAAC;;MAElCE,QAAQ,CAACqB,OAAO,CAACZ,KAAK,EAAElB,MAAM,CAAC;MAC/BO,MAAM,CAACwD,MAAM,GAAG7C,KAAK,GAAGlB,MAAM;MAC9BO,MAAM,CAACyD,sBAAsB,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CAAC3D,KAAK,EAAE;MACRY,UAAU,CAAC,CAAC;MACZqC,SAAS,CAAC,CAAC;MACXpB,YAAY,CAAC,CAAC;MACd0B,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAEH,kBAAkB,CAAC;IACzD;IAEA,OAAO,MAAM;MACTF,MAAM,CAACM,mBAAmB,CAAC,QAAQ,EAAEJ,kBAAkB,CAAC;MACxDF,MAAM,CAACO,oBAAoB,CAACpD,SAAS,CAAC;MACtC,IAAIJ,QAAQ,EAAEA,QAAQ,CAACyD,OAAO,CAAC,CAAC;IACpC,CAAC;EACL,CAAC,EAAE,CAAC/D,KAAK,EAAEE,MAAM,EAAEE,QAAQ,EAAEE,QAAQ,EAAEE,KAAK,EAAEE,SAAS,EAAEb,UAAU,CAAC,CAAC;EAErE,oBACIN,OAAA,CAAAE,SAAA;IAAAuE,QAAA,eACIzE,OAAA;MAAKG,KAAK,EAAEA,KAAM;MAACuE,GAAG,EAAElE;IAAM;MAAAmE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACnC,CAAC;AAEX,CAAC;AAACvE,EAAA,CAhHIF,IAAI;AAAA0E,EAAA,GAAJ1E,IAAI;AAkHV,eAAe2E,GAAG;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}