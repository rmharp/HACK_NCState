{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import * as THREE from 'three';\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\n// const style = {\n//     height: 500 // Set the scene height\n// };\n\n// const Box2 = ({ onProgress }) => {\n//     const mount = useRef(null);\n//     const [scene, setScene] = useState(null);\n//     const [camera, setCamera] = useState(null);\n//     const [renderer, setRenderer] = useState(null);\n//     const [controls, setControls] = useState(null);\n//     const [model, setModel] = useState(null);\n//     const [requestID, setRequestID] = useState(null);\n\n//     useEffect(() => {\n//         const sceneSetup = () => {\n//             const width = mount.current.clientWidth;\n//             const height = mount.current.clientHeight;\n\n//             const newScene = new THREE.Scene();\n//             const newCamera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n//             newCamera.position.z = 500;\n//             const newRenderer = new THREE.WebGLRenderer();\n//             newRenderer.setSize(width, height);\n//             mount.current.appendChild(newRenderer.domElement);\n//             const newControls = new OrbitControls(newCamera, mount.current);\n\n//             setScene(newScene);\n//             setCamera(newCamera);\n//             setRenderer(newRenderer);\n//             setControls(newControls);\n//         };\n\n//         const loadTheModel = () => {\n//             const loader = new OBJLoader();\n\n//             loader.load(\n//                 '../models/eleph.obj',\n//                 (object) => {\n//                     if (!scene) return; // Guard clause to ensure scene is defined\n//                     scene.add(object);\n\n//                     const el = scene.getObjectByName(\"Elephant_4\");\n//                     el.position.set(0, -150, 0);\n//                     el.material.color.set(0x50C878);\n//                     el.rotation.x = 23.5;\n\n//                     setModel(el);\n//                 },\n//                 (xhr) => {\n//                     const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n//                     onProgress(loadingPercentage);\n//                 },\n//                 (error) => {\n//                     console.error('An error happened:', error);\n//                 }\n//             );\n//         };\n\n//         const addLights = () => {\n//             if (!scene) return; // Guard clause to ensure scene is defined\n\n//             const lights = [];\n\n//             lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n//             lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n//             lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n//             lights[0].position.set(0, 2000, 0);\n//             lights[1].position.set(1000, 2000, 1000);\n//             lights[2].position.set(-1000, -2000, -1000);\n\n//             scene.add(lights[0]);\n//             scene.add(lights[1]);\n//             scene.add(lights[2]);\n//         };\n\n//         const startAnimationLoop = () => {\n//             if (!scene || !model) return; // Guard clause to ensure scene and model are defined\n\n//             model.rotation.z += 0.005;\n\n//             renderer.render(scene, camera);\n//             const newRequestID = window.requestAnimationFrame(startAnimationLoop);\n//             setRequestID(newRequestID);\n//         };\n\n//         const handleWindowResize = () => {\n//             const width = mount.current.clientWidth;\n//             const height = mount.current.clientHeight;\n\n//             if (!renderer || !camera) return; // Guard clause to ensure renderer and camera are defined\n\n//             renderer.setSize(width, height);\n//             camera.aspect = width / height;\n//             camera.updateProjectionMatrix();\n//         };\n\n//         if (!scene) {\n//             sceneSetup();\n//             addLights();\n//             loadTheModel();\n//             window.addEventListener('resize', handleWindowResize);\n//         }\n\n//         return () => {\n//             window.removeEventListener('resize', handleWindowResize);\n//             window.cancelAnimationFrame(requestID);\n//             if (controls) controls.dispose();\n//         };\n//     }, [scene, camera, renderer, controls, model, requestID, onProgress]);\n\n//     return (\n//         <>\n//             <div style={style} ref={mount} />\n//         </>\n//     );\n// };\n\n// export default Box;","map":{"version":3,"names":[],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Box2.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as THREE from 'three';\n// import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n// import { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\n// const style = {\n//     height: 500 // Set the scene height\n// };\n\n// const Box2 = ({ onProgress }) => {\n//     const mount = useRef(null);\n//     const [scene, setScene] = useState(null);\n//     const [camera, setCamera] = useState(null);\n//     const [renderer, setRenderer] = useState(null);\n//     const [controls, setControls] = useState(null);\n//     const [model, setModel] = useState(null);\n//     const [requestID, setRequestID] = useState(null);\n\n//     useEffect(() => {\n//         const sceneSetup = () => {\n//             const width = mount.current.clientWidth;\n//             const height = mount.current.clientHeight;\n\n//             const newScene = new THREE.Scene();\n//             const newCamera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n//             newCamera.position.z = 500;\n//             const newRenderer = new THREE.WebGLRenderer();\n//             newRenderer.setSize(width, height);\n//             mount.current.appendChild(newRenderer.domElement);\n//             const newControls = new OrbitControls(newCamera, mount.current);\n\n//             setScene(newScene);\n//             setCamera(newCamera);\n//             setRenderer(newRenderer);\n//             setControls(newControls);\n//         };\n\n//         const loadTheModel = () => {\n//             const loader = new OBJLoader();\n\n//             loader.load(\n//                 '../models/eleph.obj',\n//                 (object) => {\n//                     if (!scene) return; // Guard clause to ensure scene is defined\n//                     scene.add(object);\n\n//                     const el = scene.getObjectByName(\"Elephant_4\");\n//                     el.position.set(0, -150, 0);\n//                     el.material.color.set(0x50C878);\n//                     el.rotation.x = 23.5;\n\n//                     setModel(el);\n//                 },\n//                 (xhr) => {\n//                     const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n//                     onProgress(loadingPercentage);\n//                 },\n//                 (error) => {\n//                     console.error('An error happened:', error);\n//                 }\n//             );\n//         };\n\n//         const addLights = () => {\n//             if (!scene) return; // Guard clause to ensure scene is defined\n\n//             const lights = [];\n\n//             lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n//             lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n//             lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n//             lights[0].position.set(0, 2000, 0);\n//             lights[1].position.set(1000, 2000, 1000);\n//             lights[2].position.set(-1000, -2000, -1000);\n\n//             scene.add(lights[0]);\n//             scene.add(lights[1]);\n//             scene.add(lights[2]);\n//         };\n\n//         const startAnimationLoop = () => {\n//             if (!scene || !model) return; // Guard clause to ensure scene and model are defined\n\n//             model.rotation.z += 0.005;\n\n//             renderer.render(scene, camera);\n//             const newRequestID = window.requestAnimationFrame(startAnimationLoop);\n//             setRequestID(newRequestID);\n//         };\n\n//         const handleWindowResize = () => {\n//             const width = mount.current.clientWidth;\n//             const height = mount.current.clientHeight;\n\n//             if (!renderer || !camera) return; // Guard clause to ensure renderer and camera are defined\n\n//             renderer.setSize(width, height);\n//             camera.aspect = width / height;\n//             camera.updateProjectionMatrix();\n//         };\n\n//         if (!scene) {\n//             sceneSetup();\n//             addLights();\n//             loadTheModel();\n//             window.addEventListener('resize', handleWindowResize);\n//         }\n\n//         return () => {\n//             window.removeEventListener('resize', handleWindowResize);\n//             window.cancelAnimationFrame(requestID);\n//             if (controls) controls.dispose();\n//         };\n//     }, [scene, camera, renderer, controls, model, requestID, onProgress]);\n\n//     return (\n//         <>\n//             <div style={style} ref={mount} />\n//         </>\n//     );\n// };\n\n// export default Box;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}