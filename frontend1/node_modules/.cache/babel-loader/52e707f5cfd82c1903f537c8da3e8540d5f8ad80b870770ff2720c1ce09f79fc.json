{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Box.js\",\n  _s = $RefreshSig$();\nimport * as THREE from 'three';\nimport { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Box() {\n  _s();\n  loadTheModel = () => {\n    // instantiate a loader\n    const loader = new OBJLoader();\n\n    // load a resource\n    loader.load(\n    // resource URL relative to the /public/index.html of the app\n    '../models/rat_obj.obj',\n    // called when resource is loaded\n    object => {\n      this.scene.add(object);\n\n      // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n      // you can always set console.log(this.scene) and check its children to know the name of a model\n      const el = this.scene.getObjectByName(\"Box002\");\n\n      // change some custom props of the element: placement, color, rotation, anything that should be\n      // done once the model was loaded and ready for display\n      el.position.set(0, -150, 0);\n      el.material.color.set(0x50C878);\n      el.rotation.x = 23.5;\n\n      // make this element available inside of the whole component to do any animation later\n      this.model = el;\n    }, undefined,\n    // called when loading has errors\n    error => {\n      console.log('An error happened:' + error);\n    });\n  };\n  const refContainer = useRef(null);\n  useEffect(() => {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    refContainer.current && refContainer.current.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: refContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Box, \"PGRU+J3oZAAOdg9sBlM5QzF2boo=\");\n_c = Box;\nexport default Box;\nvar _c;\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"names":["THREE","useEffect","useRef","jsxDEV","_jsxDEV","Box","_s","loadTheModel","loader","OBJLoader","load","object","scene","add","el","getObjectByName","position","set","material","color","rotation","x","model","undefined","error","console","log","refContainer","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","current","appendChild","domElement","geometry","BoxGeometry","MeshBasicMaterial","cube","Mesh","z","animate","requestAnimationFrame","y","render","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Box.js"],"sourcesContent":["import * as THREE from 'three';\n\nimport { useEffect, useRef } from \"react\";\n\nfunction Box() {\n  loadTheModel = () => {\n    // instantiate a loader\n    const loader = new OBJLoader();\n\n    // load a resource\n    loader.load(\n        // resource URL relative to the /public/index.html of the app\n        '../models/rat_obj.obj',\n        // called when resource is loaded\n        ( object ) => { \n            this.scene.add( object );\n\n            // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n            // you can always set console.log(this.scene) and check its children to know the name of a model\n            const el = this.scene.getObjectByName(\"Box002\");\n\n            // change some custom props of the element: placement, color, rotation, anything that should be\n            // done once the model was loaded and ready for display\n            el.position.set(0, -150,0 );\n            el.material.color.set(0x50C878);\n            el.rotation.x = 23.5;\n\n            // make this element available inside of the whole component to do any animation later\n            this.model = el;\n        },\n        undefined,\n        // called when loading has errors\n         ( error ) => {\n\n            console.log( 'An error happened:' + error );\n\n        }\n    );\n};\n\n\n\n\n\n\n  const refContainer = useRef(null);\n  useEffect(() => {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    refContainer.current && refContainer.current.appendChild( renderer.domElement );\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return (\n    <div ref={refContainer}></div>\n\n  );\n}\n\nexport default Box"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}