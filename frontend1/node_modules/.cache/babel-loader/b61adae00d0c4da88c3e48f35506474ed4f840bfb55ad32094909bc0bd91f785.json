{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Settings() {\n  _s();\n  const [numFood, setNumFood] = useState(1);\n  const [numIterations, setNumIterations] = useState(1);\n  const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n  const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n  const [totalRat, setTotalRat] = useState(0); // Total number of rats\n  const [speciesData, setSpeciesData] = useState([]); // ArrayList of arrays for species data\n  console.log(\"ALL SPECIES ARRAY\", speciesData);\n  const handleSliderChange = (index, value) => {\n    const newSettings = [...brainSettings];\n    newSettings[index] = value;\n    setBrainSettings(newSettings);\n  };\n  const handleAddSpecies = () => {\n    const newSpecies = [numSpecies, ...brainSettings];\n    setTotalRat(totalRat + numSpecies);\n    setNumSpecies(1);\n    setBrainSettings([1, 1, 1, 1, 1]);\n    setSpeciesData([...speciesData, newSpecies]); // Add newSpecies to speciesData\n    console.log(\"CURRENT SPECIES ARRAY\", newSpecies);\n    console.log(\"iterations num\", numIterations);\n    console.log(\"Food num\", numFood);\n  };\n  // num iterations and num foods\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"simulation-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Simulation Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: numFood,\n        onChange: e => setNumFood(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: numIterations,\n        onChange: e => setNumIterations(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rat-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rat Species Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Rats: \", totalRat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-one\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          value: numSpecies,\n          onChange: e => setNumSpecies(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSpecies,\n          children: \"Add Species\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), Array.from({\n        length: 5\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [index === 0 && 'Frontal Lobe', index === 1 && 'Occipital Lobe', index === 2 && 'Hypothalamus', index === 3 && 'Parietal Lobe', index === 4 && 'Cerebellum', \": \", brainSettings[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"100\",\n          value: brainSettings[index],\n          onChange: e => handleSliderChange(index, parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"simulation-button\",\n        children: \"Run Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Settings, \"3yI2EdD45mSfbGTDKCCfVQiEv7c=\");\n_c = Settings;\nexport default Settings;\n\n/*\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\n\n//add species and simulate button\n//rat counter updated for total # rats across the species.  \n//food counter\n//List of lists. Each list is a species with 6 items (5 brain settings and nums_rats). \n\nfunction Settings() {\n    //const [ratCount, setRatCount] = useState(0); \n\n    const [firstCount, setFirstCount] = useState(1); \n\n    const handleSliderChange = (event) => {\n        console.log(event.target.value)\n        setFirstCount(parseInt(event.target.value)); \n    };\n\n\n    return (\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <div className=\"slidecontainer\">\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={firstCount} \n                        className=\"slider\"\n                        id=\"myRange\"\n                        onChange={handleSliderChange} // Handle value change\n                    />\n                    <p>Value: {firstCount}</p>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n\n\n*/\n\n/*\n\nfunction Settings(props){\n    const [firstCount, setCount] = React.useState(0)\n  \n    const increment = () => {\n        setCount(firstCount + 1);\n    };\n\n    const decrement = () => {\n        setCount(firstCount - 1);\n    };\n\n    return (\n    <>\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <h2>Counter: {firstCount}</h2>\n                <button onClick={increment}>+</button>\n                <button onClick={decrement}>-</button>\n            </div>\n        </div>\n\n    </>\n    );\n}\n\nexport default Settings;\n*/\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Settings","_s","numFood","setNumFood","numIterations","setNumIterations","numSpecies","setNumSpecies","brainSettings","setBrainSettings","totalRat","setTotalRat","speciesData","setSpeciesData","console","log","handleSliderChange","index","value","newSettings","handleAddSpecies","newSpecies","children","class","fileName","_jsxFileName","lineNumber","columnNumber","type","min","onChange","e","parseInt","target","className","onClick","Array","from","length","map","_","max","_c","$RefreshReg$"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Settings.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../CSS/Settings.css';\nimport '../index.css';\n\nfunction Settings() {\n    const [numFood, setNumFood] = useState(1);\n    const [numIterations, setNumIterations] = useState(1);\n\n    const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n    const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n    const [totalRat, setTotalRat] = useState(0); // Total number of rats\n    const [speciesData, setSpeciesData] = useState([]); // ArrayList of arrays for species data\n    console.log(\"ALL SPECIES ARRAY\", speciesData);\n\n    const handleSliderChange = (index, value) => {\n        const newSettings = [...brainSettings];\n        newSettings[index] = value;\n        setBrainSettings(newSettings);\n    };\n\n    const handleAddSpecies = () => {\n        const newSpecies = [numSpecies, ...brainSettings];\n        setTotalRat(totalRat + numSpecies);\n        setNumSpecies(1);\n        setBrainSettings([1, 1, 1, 1, 1]);\n        setSpeciesData([...speciesData, newSpecies]); // Add newSpecies to speciesData\n        console.log(\"CURRENT SPECIES ARRAY\", newSpecies);\n        console.log(\"iterations num\", numIterations);\n        console.log(\"Food num\", numFood);\n    };\n// num iterations and num foods\n    return (\n      <>\n        <div class=\"simulation-settings\">\n            <h1>Simulation Settings</h1>\n            <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={numFood}\n                    onChange={(e) => setNumFood(parseInt(e.target.value))}\n            />\n            <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={numIterations}\n                    onChange={(e) => setNumIterations(parseInt(e.target.value))}\n                />\n        </div>\n        \n        <div className=\"rat-settings\">\n            <h3>Rat Species Settings</h3>\n            <p>Total Rats: {totalRat}</p> {/* Display total number of rats */}\n            <div className=\"setting-one\">\n                {/* Input for number of species */}\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={numSpecies}\n                    onChange={(e) => setNumSpecies(parseInt(e.target.value))}\n                />\n                <button onClick={handleAddSpecies}>Add Species</button>\n            </div>\n            {/* Sliders for brain settings */}\n            {Array.from({ length: 5 }).map((_, index) => (\n                <div key={index}>\n                    <p>\n                        {index === 0 && 'Frontal Lobe'}\n                        {index === 1 && 'Occipital Lobe'}\n                        {index === 2 && 'Hypothalamus'}\n                        {index === 3 && 'Parietal Lobe'}\n                        {index === 4 && 'Cerebellum'}\n                        : {brainSettings[index]}\n                    </p>\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={brainSettings[index]}\n                        onChange={(e) => handleSliderChange(index, parseInt(e.target.value))}\n                    />\n                </div>\n            ))}\n\n            <button className=\"simulation-button\">Run Simulation</button>\n        </div>\n        </>\n    );\n}\n\nexport default Settings;\n\n\n/*\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\n\n//add species and simulate button\n//rat counter updated for total # rats across the species.  \n//food counter\n//List of lists. Each list is a species with 6 items (5 brain settings and nums_rats). \n\nfunction Settings() {\n    //const [ratCount, setRatCount] = useState(0); \n\n    const [firstCount, setFirstCount] = useState(1); \n\n    const handleSliderChange = (event) => {\n        console.log(event.target.value)\n        setFirstCount(parseInt(event.target.value)); \n    };\n\n\n    return (\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <div className=\"slidecontainer\">\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={firstCount} \n                        className=\"slider\"\n                        id=\"myRange\"\n                        onChange={handleSliderChange} // Handle value change\n                    />\n                    <p>Value: {firstCount}</p>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n\n\n*/\n\n\n\n\n\n\n\n\n\n/*\n\nfunction Settings(props){\n    const [firstCount, setCount] = React.useState(0)\n  \n    const increment = () => {\n        setCount(firstCount + 1);\n    };\n\n    const decrement = () => {\n        setCount(firstCount - 1);\n    };\n\n    return (\n    <>\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <h2>Counter: {firstCount}</h2>\n                <button onClick={increment}>+</button>\n                <button onClick={decrement}>-</button>\n            </div>\n        </div>\n\n    </>\n    );\n}\n\nexport default Settings;\n*/"],"mappings":"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C,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EAAA,eACJ,CAAC;AAEX;AAAC1B,EAAA,CAnFQD,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AAqFjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}