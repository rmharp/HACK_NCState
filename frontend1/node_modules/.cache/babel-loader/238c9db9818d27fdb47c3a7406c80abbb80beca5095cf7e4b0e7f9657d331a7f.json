{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Settings(props) {\n  _s();\n  // Pass numFood, numIterations, speciesData into simulation.py\n  const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n  const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n  const [totalRat, setTotalRat] = useState(0); // Total number of rats\n  const [animationClass, setAnimationClass] = useState('');\n  console.log(\"ALL SPECIES ARRAY\", props.speciesData);\n  const handleSliderChange = (index, value) => {\n    const newSettings = [...brainSettings];\n    newSettings[index] = value;\n    setBrainSettings(newSettings);\n  };\n  const handleAddSpecies = () => {\n    const newSpecies = [numSpecies, ...brainSettings];\n    setTotalRat(totalRat + numSpecies);\n    setNumSpecies(1);\n    setBrainSettings([1, 1, 1, 1, 1]);\n    props.setSpeciesData([...props.speciesData, newSpecies]); // Add newSpecies to speciesData\n\n    console.log(\"CURRENT SPECIES ARRAY\", newSpecies);\n    console.log(\"PROPS?\", props.speciesData);\n    console.log(\"iterations num\", props.numIterations);\n    console.log(\"Food num\", props.numFood);\n  };\n  function handleSimulationClick() {\n    alert(\"Simulation running\");\n    setTotalRat(0);\n    setBrainSettings([1, 1, 1, 1, 1]);\n    setNumSpecies(1);\n    props.setNumFood(1);\n    props.setNumIterations(1);\n    props.setSpeciesData([]);\n    props.startSimulation();\n    setAnimationClass('slide-out-right');\n  }\n  s;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `settings-container ${animationClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Simulation Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Number of food:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: props.numFood,\n        onChange: e => props.setNumFood(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Number of iterations:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: props.numIterations,\n        onChange: e => props.setNumIterations(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rat-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Rat Species Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Rats: \", totalRat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-one\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          value: numSpecies,\n          onChange: e => setNumSpecies(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddSpecies,\n          children: \"Add Species\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), Array.from({\n        length: 5\n      }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [index === 0 && 'Frontal Lobe', index === 1 && 'Occipital Lobe', index === 2 && 'Hypothalamus', index === 3 && 'Parietal Lobe', index === 4 && 'Cerebellum', \": \", brainSettings[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"100\",\n          value: brainSettings[index],\n          onChange: e => handleSliderChange(index, parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"simulation-button\",\n        onClick: handleSimulationClick,\n        children: \"Run Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n_s(Settings, \"hNx2nQxCqZUAwChRg3nylTzXMxo=\");\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Settings","props","_s","numSpecies","setNumSpecies","brainSettings","setBrainSettings","totalRat","setTotalRat","animationClass","setAnimationClass","console","log","speciesData","handleSliderChange","index","value","newSettings","handleAddSpecies","newSpecies","setSpeciesData","numIterations","numFood","handleSimulationClick","alert","setNumFood","setNumIterations","startSimulation","s","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","onChange","e","parseInt","target","onClick","Array","from","length","map","_","max","_c","$RefreshReg$"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Settings.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../CSS/Settings.css';\nimport '../index.css';\n\nfunction Settings(props) {\n    // Pass numFood, numIterations, speciesData into simulation.py\n    const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n    const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n    const [totalRat, setTotalRat] = useState(0); // Total number of rats\n    const [animationClass, setAnimationClass] = useState('');\n\n    \n    console.log(\"ALL SPECIES ARRAY\", props.speciesData);\n\n    const handleSliderChange = (index, value) => {\n        const newSettings = [...brainSettings];\n        newSettings[index] = value;\n        setBrainSettings(newSettings);\n    };\n\n    const handleAddSpecies = () => {\n        const newSpecies = [numSpecies, ...brainSettings];\n        setTotalRat(totalRat + numSpecies);\n        setNumSpecies(1);\n        setBrainSettings([1, 1, 1, 1, 1]);\n        props.setSpeciesData([...props.speciesData, newSpecies]); // Add newSpecies to speciesData\n\n        console.log(\"CURRENT SPECIES ARRAY\", newSpecies);\n        console.log(\"PROPS?\", props.speciesData);\n        console.log(\"iterations num\", props.numIterations);\n        console.log(\"Food num\", props.numFood);\n    };\n\n    function handleSimulationClick(){        \n        alert(\"Simulation running\");\n        setTotalRat(0);\n        setBrainSettings([1, 1, 1, 1, 1])\n        setNumSpecies(1);\n        props.setNumFood(1);\n        props.setNumIterations(1);\n        props.setSpeciesData([]);\n        props.startSimulation();\n        setAnimationClass('slide-out-right');\n    }\n    s\n    return (\n      <div className={`settings-container ${animationClass}`}>\n        <div className=\"simulation-settings\">\n            <h1>Simulation Settings</h1>\n            <h3>Number of food:</h3>\n            <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={props.numFood}\n                    onChange={(e) => props.setNumFood(parseInt(e.target.value))}\n            />\n            <br />\n            <h3>Number of iterations:</h3>\n            <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={props.numIterations}\n                    onChange={(e) => props.setNumIterations(parseInt(e.target.value))}\n                />\n        </div>\n        \n        <div className=\"rat-settings\">\n            <h3>Rat Species Settings</h3>\n            <p>Total Rats: {totalRat}</p> {/* Display total number of rats */}\n            <div className=\"setting-one\">\n                {/* Input for number of species */}\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={numSpecies}\n                    onChange={(e) => setNumSpecies(parseInt(e.target.value))}\n                />\n                <button onClick={handleAddSpecies}>Add Species</button>\n            </div>\n            {/* Sliders for brain settings */}\n            {Array.from({ length: 5 }).map((_, index) => (\n                <div key={index}>\n                    <p>\n                        {index === 0 && 'Frontal Lobe'}\n                        {index === 1 && 'Occipital Lobe'}\n                        {index === 2 && 'Hypothalamus'}\n                        {index === 3 && 'Parietal Lobe'}\n                        {index === 4 && 'Cerebellum'}\n                        : {brainSettings[index]}\n                    </p>\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={brainSettings[index]}\n                        onChange={(e) => handleSliderChange(index, parseInt(e.target.value))}\n                    />\n                </div>\n            ))}\n\n            <button className=\"simulation-button\" onClick={handleSimulationClick}>Run Simulation</button>\n        </div>\n        </div>\n    );\n}\n\nexport default Settings;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}