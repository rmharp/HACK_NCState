{"ast":null,"code":"var _jsxFileName = \"/Users/riley/Hack_NCState/frontend/src/components/Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Settings() {\n  _s();\n  const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n  const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n  const [totalRat, setTotalRat] = useState(0); // Total number of rats\n  const [speciesData, setSpeciesData] = useState([]); // ArrayList of arrays for species data\n\n  const handleSliderChange = (index, value) => {\n    const newSettings = [...brainSettings];\n    newSettings[index] = value;\n    setBrainSettings(newSettings);\n  };\n  const handleAddSpecies = () => {\n    const newSpecies = [numSpecies, ...brainSettings];\n    setTotalRat(totalRat + numSpecies);\n    setNumSpecies(1);\n    setBrainSettings([1, 1, 1, 1, 1]);\n    setSpeciesData([...speciesData, newSpecies]); // Add newSpecies to speciesData\n    console.log(\"SPECIES ARRAY\", newSpecies);\n  };\n  // num iterations and num foods\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"settings-modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Rats: \", totalRat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setting-one\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        value: numSpecies,\n        onChange: e => setNumSpecies(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSpecies,\n        children: \"Add Species\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), Array.from({\n      length: 5\n    }).map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [index === 0 && 'Frontal Lobe', index === 1 && 'Occipital Lobe', index === 2 && 'Hypothalamus', index === 3 && 'Parietal Lobe', index === 4 && 'Cerebellum', \": \", brainSettings[index]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"100\",\n        value: brainSettings[index],\n        onChange: e => handleSliderChange(index, parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"simulation-button\",\n      children: \"Run Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_s(Settings, \"2lu4rVr7qDg8gSKPuNwtKD+B7Tg=\");\n_c = Settings;\nexport default Settings;\n\n/*\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\n\n//add species and simulate button\n//rat counter updated for total # rats across the species.  \n//food counter\n//List of lists. Each list is a species with 6 items (5 brain settings and nums_rats). \n\nfunction Settings() {\n    //const [ratCount, setRatCount] = useState(0); \n\n    const [firstCount, setFirstCount] = useState(1); \n\n    const handleSliderChange = (event) => {\n        console.log(event.target.value)\n        setFirstCount(parseInt(event.target.value)); \n    };\n\n\n    return (\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <div className=\"slidecontainer\">\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={firstCount} \n                        className=\"slider\"\n                        id=\"myRange\"\n                        onChange={handleSliderChange} // Handle value change\n                    />\n                    <p>Value: {firstCount}</p>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n\n\n*/\n\n/*\n\nfunction Settings(props){\n    const [firstCount, setCount] = React.useState(0)\n  \n    const increment = () => {\n        setCount(firstCount + 1);\n    };\n\n    const decrement = () => {\n        setCount(firstCount - 1);\n    };\n\n    return (\n    <>\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <h2>Counter: {firstCount}</h2>\n                <button onClick={increment}>+</button>\n                <button onClick={decrement}>-</button>\n            </div>\n        </div>\n\n    </>\n    );\n}\n\nexport default Settings;\n*/\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Settings","_s","numSpecies","setNumSpecies","brainSettings","setBrainSettings","totalRat","setTotalRat","speciesData","setSpeciesData","handleSliderChange","index","value","newSettings","handleAddSpecies","newSpecies","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","onChange","e","parseInt","target","onClick","Array","from","length","map","_","max","_c","$RefreshReg$"],"sources":["/Users/riley/Hack_NCState/frontend/src/components/Settings.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../CSS/Settings.css';\n\nfunction Settings() {\n    const [numSpecies, setNumSpecies] = useState(1); // For the number of species\n    const [brainSettings, setBrainSettings] = useState([1, 1, 1, 1, 1]); // For brain settings\n    const [totalRat, setTotalRat] = useState(0); // Total number of rats\n    const [speciesData, setSpeciesData] = useState([]); // ArrayList of arrays for species data\n\n    const handleSliderChange = (index, value) => {\n        const newSettings = [...brainSettings];\n        newSettings[index] = value;\n        setBrainSettings(newSettings);\n    };\n\n    const handleAddSpecies = () => {\n        const newSpecies = [numSpecies, ...brainSettings];\n        setTotalRat(totalRat + numSpecies);\n        setNumSpecies(1);\n        setBrainSettings([1, 1, 1, 1, 1]);\n        setSpeciesData([...speciesData, newSpecies]); // Add newSpecies to speciesData\n        console.log(\"SPECIES ARRAY\", newSpecies);\n    };\n// num iterations and num foods\n    return (\n        <div className=\"settings-modal\">\n            <h3>Settings</h3>\n            <p>Total Rats: {totalRat}</p> {/* Display total number of rats */}\n            <div className=\"setting-one\">\n                {/* Input for number of species */}\n                <input\n                    type=\"number\"\n                    min=\"1\"\n                    value={numSpecies}\n                    onChange={(e) => setNumSpecies(parseInt(e.target.value))}\n                />\n                <button onClick={handleAddSpecies}>Add Species</button>\n            </div>\n            {/* Sliders for brain settings */}\n            {Array.from({ length: 5 }).map((_, index) => (\n                <div key={index}>\n                    <p>\n                        {index === 0 && 'Frontal Lobe'}\n                        {index === 1 && 'Occipital Lobe'}\n                        {index === 2 && 'Hypothalamus'}\n                        {index === 3 && 'Parietal Lobe'}\n                        {index === 4 && 'Cerebellum'}\n                        : {brainSettings[index]}\n                    </p>\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={brainSettings[index]}\n                        onChange={(e) => handleSliderChange(index, parseInt(e.target.value))}\n                    />\n                </div>\n            ))}\n\n            <button className=\"simulation-button\">Run Simulation</button>\n        </div>\n    );\n}\n\nexport default Settings;\n\n\n/*\nimport React, { useState } from 'react';\nimport '../CSS/Settings.css';\n\n//add species and simulate button\n//rat counter updated for total # rats across the species.  \n//food counter\n//List of lists. Each list is a species with 6 items (5 brain settings and nums_rats). \n\nfunction Settings() {\n    //const [ratCount, setRatCount] = useState(0); \n\n    const [firstCount, setFirstCount] = useState(1); \n\n    const handleSliderChange = (event) => {\n        console.log(event.target.value)\n        setFirstCount(parseInt(event.target.value)); \n    };\n\n\n    return (\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <div className=\"slidecontainer\">\n                    <input\n                        type=\"range\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={firstCount} \n                        className=\"slider\"\n                        id=\"myRange\"\n                        onChange={handleSliderChange} // Handle value change\n                    />\n                    <p>Value: {firstCount}</p>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n\n\n*/\n\n\n\n\n\n\n\n\n\n/*\n\nfunction Settings(props){\n    const [firstCount, setCount] = React.useState(0)\n  \n    const increment = () => {\n        setCount(firstCount + 1);\n    };\n\n    const decrement = () => {\n        setCount(firstCount - 1);\n    };\n\n    return (\n    <>\n        <div class = \"settings-modal\">\n            <h3>Settings</h3>\n            <div class=\"setting-one\"> \n                <h2>Counter: {firstCount}</h2>\n                <button onClick={increment}>+</button>\n                <button onClick={decrement}>-</button>\n            </div>\n        </div>\n\n    </>\n    );\n}\n\nexport default Settings;\n*/"],"mappings":"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,YAAA;MAAA,OACxE,CAAC;IAAA,GAfIZ,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBV,CACR,CAAC,eAEFxB,OAAA;MAAQmB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEd;AAACtB,EAAA,CA3DQD,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AA6DjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}